class ram_wbase_seq extends uvm_sequence #(write_xtn);  
	
 
	`uvm_object_utils(ram_wbase_seq)  
	
	 function new(string name ="ram_wbase_seq");
		super.new(name);
	endfunction
endclass



//SEQUENCE:random 10 write txns
class ram_rand_wr_xtns extends ram_wbase_seq;

  	`uvm_object_utils(ram_rand_wr_xtns)

	extern function new(string name ="ram_rand_wr_xtns");
	extern task body();
	
endclass

function ram_rand_wr_xtns::new(string name = "ram_rand_wr_xtns");
	super.new(name);
endfunction


task ram_rand_wr_xtns::body();
    repeat(10)
	begin
		req=write_xtn::type_id::create("req");
		start_item(req);
		assert(req.randomize());
		finish_item(req); 	
	end
endtask

//SEQUENCE::10 txns on same address
class ram_single_addr_wr_xtns extends ram_wbase_seq;

  	
	`uvm_object_utils(ram_single_addr_wr_xtns)

	
        extern function new(string name ="ram_single_addr_wr_xtns");
        extern task body();
		
	endclass

function ram_single_addr_wr_xtns::new(string name = "ram_single_addr_wr_xtns");
	super.new(name);
endfunction

	  
task ram_single_addr_wr_xtns::body();
    repeat(10)
	begin
		req=write_xtn::type_id::create("req");
		start_item(req);
		assert(req.randomize() with {address==100;} );
		finish_item(req);
                //`uvm_do(req);
                //`uvm_do_with(req, {address == 100;}); 	
	end
endtask

//SEQUENCE:10 txns of random data on consecutive address(0-9)

class ram_ten_wr_xtns extends ram_wbase_seq;

  	
	`uvm_object_utils(ram_ten_wr_xtns)

    extern function new(string name ="ram_ten_wr_xtns");
    extern task body();
endclass

function ram_ten_wr_xtns::new(string name = "ram_ten_wr_xtns");
	super.new(name);
endfunction

	  
task ram_ten_wr_xtns::body();
	int addrseq; 
	addrseq=0;	
   	repeat(10) 
	begin
		req=write_xtn::type_id::create("req");
		start_item(req);
		assert(req.randomize() with {address==addrseq; write==1'b1;} );
		finish_item(req);
		addrseq=addrseq + 1;
	end
endtask

//SEQUENCE:10 txns of random data on odd memory address
class ram_odd_wr_xtns extends ram_wbase_seq;

  	
  	`uvm_object_utils(ram_odd_wr_xtns)

	    extern function new(string name ="ram_odd_wr_xtns");
    extern task body();
endclass

function ram_odd_wr_xtns::new(string name = "ram_odd_wr_xtns");
	super.new(name);
endfunction

	  
task ram_odd_wr_xtns::body();
	int addrseq; 
	addrseq=0;	
   	repeat(10) 
	begin
		req=write_xtn::type_id::create("req");
		start_item(req);
		assert(req.randomize() with {address==(2*addrseq+1);write==1'b1;} );
		finish_item(req);
		addrseq=addrseq + 1;
	end
endtask


//SEQUENCE:EVEN ADDRESS 
class ram_even_wr_xtns extends ram_wbase_seq;

  	
  	`uvm_object_utils(ram_even_wr_xtns)

    extern function new(string name ="ram_even_wr_xtns");
    extern task body();
endclass

function ram_even_wr_xtns::new(string name = "ram_even_wr_xtns");
	super.new(name);
endfunction

task ram_even_wr_xtns::body();
	int addrseq; 
	addrseq=0;	
   	repeat(10) 
	begin
		req=write_xtn::type_id::create("req");
		//start_item(req);
		//assert(req.randomize() with {address==(2*addrseq);write==1'b1;} );
		//finish_item(req);
     		`uvm_do_with(req, {address == (2*addrseq); write == 1'b1;});
		addrseq=addrseq + 1;
	end
endtask


// mixed odd and even sequence 
class ram_odd_even_wr_xtns extends ram_wbase_seq;

ram_even_wr_xtns  even_txn;
ram_odd_wr_xtns   odd_txn;
 	
  	`uvm_object_utils(ram_odd_even_wr_xtns)

		    extern function new(string name ="ram_odd_even_wr_xtns");
    extern task body();
endclass

function ram_odd_even_wr_xtns::new(string name = "ram_odd_even_wr_xtns");
	super.new(name);
endfunction

task ram_odd_even_wr_xtns::body();
	begin
		even_txn=ram_even_wr_xtns::type_id::create("even_txn");
		odd_txn=ram_odd_wr_xtns::type_id::create("odd_txn");
          fork
               `uvm_do(even_txn);
               `uvm_do(odd_txn);
        join
	end
endtask
///////////////////////////////////////////////////////////////////
class ram_six_addr_wr_xtns extends ram_wbase_seq;

	`uvm_object_utils(ram_six_addr_wr_xtns)
	
	extern function new(string name="ram_six_addr_wr_xtns");	
	extern task body();
	
endclass

function ram_six_addr_wr_xtns::new(string name = "ram_six_addr_wr_xtns");
	super.new(name);
endfunction

task ram_six_addr_wr_xtns::body();
	repeat(10)
	begin
		req=write_xtn::type_id::create("req");
		start_item(req);	
		assert(req.randomize() with {address%10 == 6;});
		finish_item(req);	
	end
endtask		